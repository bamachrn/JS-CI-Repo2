{
  "reportTitle": "JS-CI-Repo2",
  "stats": {
    "suites": 4,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2015-04-08T06:06:39.995Z",
    "end": "2015-04-08T06:06:40.261Z",
    "duration": 266,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Hello",
        "suites": [
          {
            "title": "#sayHello",
            "suites": [],
            "tests": [
              {
                "title": "should return the default hello message if no options are provided",
                "fullTitle": "Hello #sayHello should return the default hello message if no options are provided",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hello();\nassert.equal(<span class=\"hljs-string\">'Hello World!'</span>, hello.sayHello());",
                "isRoot": false,
                "uuid": "6ff09de1-3d2d-412e-a665-596a9b2a9107",
                "parentUUID": "3e2fd0ce-f9bc-4e4e-87ac-785f38385f8a",
                "skipped": false
              },
              {
                "title": "should allow the user to override the helloMessage when instantiating",
                "fullTitle": "Hello #sayHello should allow the user to override the helloMessage when instantiating",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hello({\n  helloMessage: <span class=\"hljs-string\">'你好世界'</span>\n})\nassert.equal(<span class=\"hljs-string\">'你好世界'</span>, hello.sayHello());",
                "isRoot": false,
                "uuid": "eae29832-02ca-4455-927a-4f7316f2d4b1",
                "parentUUID": "3e2fd0ce-f9bc-4e4e-87ac-785f38385f8a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 3000,
            "file": "\\test\\hello-test.js",
            "uuid": "3e2fd0ce-f9bc-4e4e-87ac-785f38385f8a",
            "fullFile": "d:\\JS-CI-Repo2\\test\\hello-test.js",
            "passes": [
              "[Circular ~.suites.suites.0.suites.0.tests.0]",
              "[Circular ~.suites.suites.0.suites.0.tests.1]"
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "#sayHelloLater",
            "suites": [],
            "tests": [
              {
                "title": "should execute callback with the hello message asynchronously",
                "fullTitle": "Hello #sayHelloLater should execute callback with the hello message asynchronously",
                "timedOut": false,
                "duration": 250,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hello();\nhello.sayHelloLater(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(helloMessage)</span> </span>{\n  assert.equal(helloMessage, <span class=\"hljs-string\">'Hello World!'</span>);\n  <span class=\"hljs-comment\">// calling done indicates that all asynchronous</span>\n  <span class=\"hljs-comment\">// aspects of test are complete.</span>\n  done();\n});",
                "isRoot": false,
                "uuid": "ea237b3e-97d3-44d6-b1cd-0f31743064fb",
                "parentUUID": "4ef07a4d-8df8-4f62-a3c9-09efd0d5f52c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 3000,
            "file": "\\test\\hello-test.js",
            "uuid": "4ef07a4d-8df8-4f62-a3c9-09efd0d5f52c",
            "fullFile": "d:\\JS-CI-Repo2\\test\\hello-test.js",
            "passes": [
              "[Circular ~.suites.suites.0.suites.1.tests.0]"
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 250
          },
          {
            "title": "#sayHelloThenSayHelloLater",
            "suites": [],
            "tests": [
              {
                "title": "should invoke both #sayHello and #sayHelloLater",
                "fullTitle": "Hello #sayHelloThenSayHelloLater should invoke both #sayHello and #sayHelloLater",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hello();\n\n<span class=\"hljs-comment\">// stub the sayHello and sayHelloLater methods</span>\n<span class=\"hljs-comment\">// with sinon.</span>\nhello.sayHello = sinon.spy();\nhello.sayHelloLater = sinon.spy();\nhello.sayHelloThenSayHelloLater();\nassert.equal(hello.sayHello.callCount, <span class=\"hljs-number\">1</span>);\nassert.equal(hello.sayHelloLater.callCount, <span class=\"hljs-number\">1</span>);",
                "isRoot": false,
                "uuid": "b329062d-a051-4cf9-a692-5996a17f3bec",
                "parentUUID": "5493910a-c9c8-497e-8cbd-5b43afef9fe5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 3000,
            "file": "\\test\\hello-test.js",
            "uuid": "5493910a-c9c8-497e-8cbd-5b43afef9fe5",
            "fullFile": "d:\\JS-CI-Repo2\\test\\hello-test.js",
            "passes": [
              "[Circular ~.suites.suites.0.suites.2.tests.0]"
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 3000,
        "file": "\\test\\hello-test.js",
        "uuid": "a9a56fc4-3e44-4f72-a13a-4496c8dccbeb",
        "fullFile": "d:\\JS-CI-Repo2\\test\\hello-test.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 3000,
    "uuid": "f14dc05f-91bd-40a8-b07c-e224df7487d6",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should return the default hello message if no options are provided",
      "fullTitle": "#sayHello should return the default hello message if no options are provided",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hello();\nassert.equal(<span class=\"hljs-string\">'Hello World!'</span>, hello.sayHello());",
      "isRoot": false,
      "uuid": "7a3b4609-094d-442f-beca-7ab3e2fe70e4",
      "parentUUID": "3e2fd0ce-f9bc-4e4e-87ac-785f38385f8a",
      "skipped": false
    },
    {
      "title": "should allow the user to override the helloMessage when instantiating",
      "fullTitle": "#sayHello should allow the user to override the helloMessage when instantiating",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hello({\n  helloMessage: <span class=\"hljs-string\">'你好世界'</span>\n})\nassert.equal(<span class=\"hljs-string\">'你好世界'</span>, hello.sayHello());",
      "isRoot": false,
      "uuid": "c71c7ad0-674d-4b13-bbbf-2cf31ce5395d",
      "parentUUID": "3e2fd0ce-f9bc-4e4e-87ac-785f38385f8a",
      "skipped": false
    },
    {
      "title": "should execute callback with the hello message asynchronously",
      "fullTitle": "#sayHelloLater should execute callback with the hello message asynchronously",
      "timedOut": false,
      "duration": 250,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hello();\nhello.sayHelloLater(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(helloMessage)</span> </span>{\n  assert.equal(helloMessage, <span class=\"hljs-string\">'Hello World!'</span>);\n  <span class=\"hljs-comment\">// calling done indicates that all asynchronous</span>\n  <span class=\"hljs-comment\">// aspects of test are complete.</span>\n  done();\n});",
      "isRoot": false,
      "uuid": "7f246665-55e9-44cf-b398-6945cabaaea5",
      "parentUUID": "4ef07a4d-8df8-4f62-a3c9-09efd0d5f52c",
      "skipped": false
    },
    {
      "title": "should invoke both #sayHello and #sayHelloLater",
      "fullTitle": "#sayHelloThenSayHelloLater should invoke both #sayHello and #sayHelloLater",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hello();\n\n<span class=\"hljs-comment\">// stub the sayHello and sayHelloLater methods</span>\n<span class=\"hljs-comment\">// with sinon.</span>\nhello.sayHello = sinon.spy();\nhello.sayHelloLater = sinon.spy();\nhello.sayHelloThenSayHelloLater();\nassert.equal(hello.sayHello.callCount, <span class=\"hljs-number\">1</span>);\nassert.equal(hello.sayHelloLater.callCount, <span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "d992481c-5fb4-4add-8dbd-1cc9d48e5c35",
      "parentUUID": "5493910a-c9c8-497e-8cbd-5b43afef9fe5",
      "skipped": false
    }
  ],
  "allHooks": [],
  "allPending": [],
  "allPasses": [
    {
      "title": "should return the default hello message if no options are provided",
      "fullTitle": "#sayHello should return the default hello message if no options are provided",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hello();\nassert.equal(<span class=\"hljs-string\">'Hello World!'</span>, hello.sayHello());",
      "isRoot": false,
      "uuid": "0540eff3-9f62-4fc5-9407-12dc1679de97",
      "parentUUID": "3e2fd0ce-f9bc-4e4e-87ac-785f38385f8a",
      "skipped": false
    },
    {
      "title": "should allow the user to override the helloMessage when instantiating",
      "fullTitle": "#sayHello should allow the user to override the helloMessage when instantiating",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hello({\n  helloMessage: <span class=\"hljs-string\">'你好世界'</span>\n})\nassert.equal(<span class=\"hljs-string\">'你好世界'</span>, hello.sayHello());",
      "isRoot": false,
      "uuid": "280e7a5a-b692-4248-a294-8c1634694873",
      "parentUUID": "3e2fd0ce-f9bc-4e4e-87ac-785f38385f8a",
      "skipped": false
    },
    {
      "title": "should execute callback with the hello message asynchronously",
      "fullTitle": "#sayHelloLater should execute callback with the hello message asynchronously",
      "timedOut": false,
      "duration": 250,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hello();\nhello.sayHelloLater(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(helloMessage)</span> </span>{\n  assert.equal(helloMessage, <span class=\"hljs-string\">'Hello World!'</span>);\n  <span class=\"hljs-comment\">// calling done indicates that all asynchronous</span>\n  <span class=\"hljs-comment\">// aspects of test are complete.</span>\n  done();\n});",
      "isRoot": false,
      "uuid": "2cba91ac-6457-45ba-8981-1285fd2db49d",
      "parentUUID": "4ef07a4d-8df8-4f62-a3c9-09efd0d5f52c",
      "skipped": false
    },
    {
      "title": "should invoke both #sayHello and #sayHelloLater",
      "fullTitle": "#sayHelloThenSayHelloLater should invoke both #sayHello and #sayHelloLater",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hello();\n\n<span class=\"hljs-comment\">// stub the sayHello and sayHelloLater methods</span>\n<span class=\"hljs-comment\">// with sinon.</span>\nhello.sayHello = sinon.spy();\nhello.sayHelloLater = sinon.spy();\nhello.sayHelloThenSayHelloLater();\nassert.equal(hello.sayHello.callCount, <span class=\"hljs-number\">1</span>);\nassert.equal(hello.sayHelloLater.callCount, <span class=\"hljs-number\">1</span>);",
      "isRoot": false,
      "uuid": "8f754ed2-98c1-467d-a829-69f41d03c8dd",
      "parentUUID": "5493910a-c9c8-497e-8cbd-5b43afef9fe5",
      "skipped": false
    }
  ],
  "allFailures": []
}